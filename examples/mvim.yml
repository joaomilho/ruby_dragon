app:
  name: org.vim.MacVim
  version: 1
keystrokes:
  # Things to be done in insert mode
  cancel: [Escape]
  "keystroke normal": [Escape]
  "keystroke insert": [i]
  quotes: ["\""]
  quote: ["\""]
  brackets: ["["]
  backspace: [Delete]
  space: [Space]
  colon: [":"]
  "two colons": [":", ":"]

  # Motion
  left: [LeftArrow]
  right: [RightArrow]
  up: [UpArrow]
  down: [DownArrow]
  "move up": [UpArrow]
  "move down": [DownArrow]
  top: [Escape, g, g]
  bottom: [Escape, Shift-g]

  # things to be done in normal mode
  "remove word": [Escape, d, w]
  "delete line": [Escape, d, d]
  "delete until": [Escape, d, "/"]
  "remove trailing spaces": [Escape, "0", "d", "w"]

  "delete until end": [Escape, Shift-d]
  open: [Escape, ":", "e", " "]
  save: [Escape, ":", "w", Return]
  quit: [Escape, ":", "q", Return]
  replace: [Escape, ":", "%", "s", "/", "/", "/", "g"]

  # Search
  search: [Escape, "/"]

  #Text manipulation
  capitalize: [Escape, g, c, w]
  uppercase: [Escape, v, Shift-u]
  uppercase: [Escape, v, Shift-u]
  "camel case": [Escape, v, Shift-u]

  # Commands
  execute: [Escape, ":", "!"]

  #Insert mode
  insert: [Escape, i]
  "insert in the beggining": [Escape, Shift-i]
  "new line insert": [Escape, o]
  "new line": [Escape, o, Escape]
  indent: [Escape, "="]
  begin: [Escape, "^"]
  "begin of line": [Escape, "0"]
  end: [Escape, "$"]
  "end of line": [Escape, "g", "_"]
  undo: [Escape, u]
  redo: [Escape, Ctrl-r]
  visual: [Escape, v]
  next: [Escape, n]
  repeat: [Escape, "."]
  yank: [y]
  paste: [Escape, p]
  "yank line": [Escape, y, y]
  dup: [Escape, y, y, p]
  "select all surroundings": [Escape, v, i, p]
  word: [Escape, w]
  "back word": [Escape, b]

  #Case
  "uppercase word": [Escape, v, w, Shift-u]
  "uppercase last word": [Escape, b, v, w, Shift-u]

  # NerdTree stuff
  tree: [Escape, ",", "p"]
  "open tree": [Escape, ",", "p"]
  "close tree": [Escape, ",", "p"]
  modify: [m]
  add: [m, a]
  move: [m, m]
  "delete file": [m, d]
  remove: [m, d]
  reveal: [m, r]
  duplicate: [m, c]
  "open file": [Return]
  "enter": [Return]
  "split file": [s]
  split: [s]
  yes: [y]

  #macros
  #TODO add a tab in the end!
  define: [Escape, "d", "e", "f"]

texts:
  describe: "desc "
scripts:
  "prepare": |
    set microphone to command operation

  "insert": |
    execute command "keystroke normal" of group "MacVim"
    execute command "keystroke insert" of group "MacVim"
    set microphone to dictation
  "normal": |
    execute command "keystroke normal" of group "MacVim"
    set microphone to command operation
  "constant /!Something!/": |
    on srhandler(vars)
      set scriptPath to "Macintosh HD:Users:jm:p:dragon-custom-commands:_string.scpt"
      set _string to load script alias scriptPath
      set dictatedText to (varSomething of vars)
      set fixedText to _string's replaceString(dictatedText, " ", "_")
      execute command "insert"
      keystroke fixedText using shift down
      keystroke " = "
    end srhandler
  "variable /!Something!/": |
    on srhandler(vars)
      set scriptPath to "Macintosh HD:Users:jm:p:dragon-custom-commands:_string.scpt"
      set _string to load script alias scriptPath
      set dictatedText to (varSomething of vars)
      set fixedText to _string's replaceString(dictatedText, " ", "_")
      set fixedText to _string's lowerString(fixedText)
      execute command "insert"
      keystroke fixedText
      keystroke " = "
    end srhandler
  "variable /!Something!/ equals": |
    on srhandler(vars)
      set scriptPath to "Macintosh HD:Users:jm:p:dragon-custom-commands:_string.scpt"
      set _string to load script alias scriptPath
      set dictatedText to (varSomething of vars)
      set fixedText to _string's replaceString(dictatedText, " ", "_")
      set fixedText to _string's lowerString(fixedText)
      execute command "insert"
      keystroke fixedText
      keystroke " = "
    end srhandler
  "instance variable /!Something!/": |
    on srhandler(vars)
      set scriptPath to "Macintosh HD:Users:jm:p:dragon-custom-commands:_string.scpt"
      set _string to load script alias scriptPath
      set dictatedText to (varSomething of vars)
      set fixedText to _string's replaceString(dictatedText, " ", "_")
      set fixedText to _string's lowerString(fixedText)
      execute command "insert"
      keystroke "@"
      keystroke fixedText
      keystroke " = "
    end srhandler
  "replace character": |
    execute command "normal"
    keystroke "r"
    set microphone to spelling

  "go to /!LineNumber!/": |
    on srhandler(vars)
      set lineNumber to (varLineNumber of vars)
      try
        set lineNumber to lineNumber as number
        keystroke Escape
        keystroke ":"
        keystroke lineNumber
        keystroke return
      end try
    end srhandler

